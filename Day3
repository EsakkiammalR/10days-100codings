1.Check if a number is Palindrome or Not
public class Main {

    // Function to check if a
    // given integer is a palindrome
    static boolean palindrome(int n) {
        // Initialize a variable to
        // store the reverse of the number
        int revNum = 0;
        // Create a duplicate variable to
        // store the original number
        int dup = n;
        // Iterate through each digit of
        // the number until it becomes 0
        while (n > 0) {
            // Extract the last
            // digit of the number
            int ld = n % 10;
            // Build the reverse number
            // by appending the last digit
            revNum = (revNum * 10) + ld;
            // Remove the last digit
            // from the original number
            n = n / 10;
        }
        // Check if the original number
        // is equal to its reverse
        if (dup == revNum) {
            // If equal, return true
            // indicating it's a palindrome
            return true;
        } else {
            // If not equal, return false
            // indicating it's not a palindrome
            return false;
        }
    }

    public static void main(String[] args) {
        int number = 4554;

        if (palindrome(number)) {
            System.out.println(number + " is a palindrome.");
        } else {
            System.out.println(number + " is not a palindrome.");
        }
    }
}

2.Find all Palindrome Numbers in a given range
public class tuf {
      static boolean isPalindrome(int n)
        {
             
            int reverse = 0;
            int temp = n;
            while(temp>0) {
                reverse = reverse*10 + temp%10;
                temp = temp/10;
            }
                 
            // If n and reverse are same,
            // then n is palindrome
           if(n==reverse)return true;
           return false;
        }
       
        public static void main(String args[])
        {
            int min = 100;
            int max = 150;
            for(int i=min; i<=max; i++) {
                if(isPalindrome(i)) {
                    System.out.print(i + " ");
                }
            }
     
        }
}

3.Check if a number is prime or not
import java.util.*;

public class Main {

    // Function to check if a
    // given number is prime.
    static boolean checkPrime(int n){ 

        // Initialize a counter variable to
        // count the number of factors.
        int cnt = 0;

        // Loop through numbers from 1
        // to the square root of n.
        for(int i = 1; i <= Math.sqrt(n); i++){ 

            // If n is divisible by i
            // without any remainder.
            if(n % i == 0){ 

                // Increment the counter.
                cnt = cnt + 1;

                // If n is not a perfect square,
                // count its reciprocal factor.
                if(n / i != i){
                    cnt = cnt + 1;
                }
            }
        }

        // If the number of
        // factors is exactly 2.
        if(cnt == 2){
             // Return true, indicating
             // that the number is prime.
            return true;
        }
        // If the number of
        // factors is not 2.
        else{ 
            // Return false, indicating
            // that the number is not prime.
            return false; 
        }
    }

    public static void main(String[] args) {
        int n = 1483;
        boolean isPrime = checkPrime(n);
        if(isPrime){
            System.out.println(n + " is a prime number.");
        } else {
            System.out.println(n + " is not a prime number.");
        }
    }
}

4.Prime Numbers in a given range
public class Main {
  public static boolean isPrime(int num) {
    if (num == 1)
      return false;
    for (int i = 2; i < Math.sqrt(num); i++) {
      if (num % i == 0)
        return false;
    }
    return true;
  }
  public static void PrintPrimesbwrange(int a, int b) {
    for (int i = a; i <= b; i++) {
      if (isPrime(i)) {
        System.out.print(i + " ");
      }
    }
  }
  public static void main(String args[]) {
    int a = 10, b = 17;
    PrintPrimesbwrange(a, b);
  }
}

5.Check if a number is Armstrong Number or not
import java.lang.Math;

public class ArmstrongNumber {
    // Function to check if a
    // number is an Armstrong number
    public static boolean isArmstrong(int num) {
        // Calculate the number of
        // digits in the given number
        int k = String.valueOf(num).length();
        // Initialize the sum of digits
        // raised to the power of k to 0
        int sum = 0;
        // Copy the value of the input
        // number to a temporary variable n
        int n = num;
        // Iterate through each
        // digit of the number
        while(n > 0){
            // Extract the last
            // digit of the number
            int ld = n % 10;
            // Add the digit raised to
            // the power of k to the sum
            sum += Math.pow(ld, k); 
            // Remove the last digit
            // from the number
            n = n / 10;
        }
        // Check if the sum of digits raised to
        // the power of k equals the original number
        return sum == num ? true : false;
    }

    public static void main(String[] args) {
        int number = 153;
        if (isArmstrong(number)) {
            System.out.println(number + " is an Armstrong number.");
        } else {
            System.out.println(number + " is not an Armstrong number.");
        }
    }
}

6.Check whether a number is Perfect Number or not
import java.io.*;
import java.util.*;

class takeuforward {

  // Driver code

  static boolean isPerfect(int n) {
    int sum = 0;
    for (int i = 1; i * i <= n; i++) {
      if (n % i == 0) {
       
        if (i * i == n || i == 1)
          sum = sum + i;
        else sum = sum + i + n / i;

      }
    }
    
    if (sum == n)
      return true;
    else return false;
  }

  public static void main(String[] args) {

    boolean ex1 = isPerfect(6);
    boolean ex2 = isPerfect(15);
    boolean ex3 = isPerfect(28);

    if (ex1 == true) {
      System.out.println("6 is a perfect Number");
    } else System.out.println("6 is a not perfect Number");

    if (ex2 == true) {
      System.out.println("15 is a perfect Number");
    } else System.out.println("15 is not a perfect Number");

    if (ex3 == true) {
      System.out.println("28 is a perfect Number");
    } else System.out.println("28 is not a perfect Number");

  }
}

7.Even or Odd
import java.util.*;

public class tuf {
  public static void main(String[] args) {
    int n = 5;
    if (remainder(n) == 0) {
      System.out.println(n + " is even.");
    } else {
      System.out.println(n + " is odd.");
    }
  }
  public static int remainder(int n) {
    return (n % 2);
  }
}

8.Postive or Negative
import java.util.*;

public class tuf {

  public static void main(String[] args) {

    int n = 5;
    check(n);
    n = -6;
    check(n);
  }
  public static void check(int n) {
    if (n > 0) {
      System.out.println(n + " is positive.");
    } else {
      System.out.println(n + " is negative.");
    }
  }
}

9.Sum of N Natural numbers
import java.util.*;

public class tuf {

  public static void main(String[] args) {

    solve(5);
    solve(6);
  }
  public static void solve(int N) {
    int sum = N * (N + 1) / 2;
    System.out.println("The sum of the first " + N + " numbers is: " + sum);
  }
}

10.sum of an AP series
class APSeries {
    // Method to calculate the sum of an AP series
    static float sumOfAP(float a, float d, int n) {
        float sum = (n / 2.0f) * (2.0f * a + (n - 1) * d);
        return sum;
    }

    public static void main(String[] args) {
        float a = 1.5f, d = 3.0f;
        int n = 5;
        System.out.println("Sum of Given AP Series: " + sumOfAP(a, d, n));
    }
}

11.Sum of GP
import java.util.*;
public class Main {
  public static float SumofGP(float a, float r, int n) {
    float sum = a * ((float) Math.pow(r, n) - 1) / (r - 1);
    return sum;
  }

  public static void main(String args[]) {
    float a = 2; // First term of G.P.
    float r = 2; // common ratio of G.P.
    int n = 4; // Number of terms of G.P.
    System.out.println("Sum of GP Series is "+SumofGP(a, r, n));
  }
}

12.Greatest of Two numbers
public class Main {
  public static void main(String args[]) {
    double num1 = 1.123;
    double num2 = 1.124;
    if (num1 < num2) {
      System.out.println("The greatest of two numbers is "+num2);
    } else {
      System.out.println("The greatest of two numbers is "num1);
    }
  }
}

13.Greatest of three numbers
public class Main {
  public static void main(String args[]) {
    double num1 = 1.123, num2 = 1.124, num3 = 1.125;
    if (num1 > num2 && num1 > num3) {
      System.out.println("The greatest of the three numbers is "+num1);
    } else if (num2 > num1 && num2 > num3) {
      System.out.println("The greatest of the three numbers is "+num2);
    } else {
      System.out.println("The greatest of the three numbers is "+num3);
    }
  }
}

14.Leap or not
public class Main {
  public static void main(String args[]) {
    int year = 1992;
    if (((year % 4 == 0) && (year % 100 != 0)) ||(year % 400 == 0)) {
      System.out.println("Yes");
    } else {
      System.out.println("No");
    }
  }
}

15.Reverse digits of a number
import java.io.*;
class Test
{
static private int Rev(int n)
{
	int d;
	int rev = 0;
	while (n != 0)
	{
		d = n % 10;
		rev = rev * 10 + d;
		n = n / 10;
	}

	return rev;
}
public static void main(String[] args)
{
	int n = 472;
	System.out.print("The reverse of the given number is: "+Rev(n));
}
}

16.Maximum and Minimum Digit in a Number
import java.io.*;
class Test
{
static private void MinMax(int n)
{
	int d;
	int mini = Integer.MAX_VALUE;
	int maxi = Integer.MIN_VALUE;
	while (n != 0)
	{
		d = n % 10;
		mini = Math.min(mini,d);
		maxi = Math.max(maxi,d);
		n = n / 10;
	}

	System.out.println("The minimum number is: "+mini);
	System.out.print("The maximum number is: "+maxi);
}
public static void main(String[] args)
{
	int n = 4726;
	MinMax(n);
}
}

17.Print Fibonacci Series up to Nth term
class Recursion {
    
    static int fibonacci(int N){
        
            // Base Condition.
            if(N <= 1){
                
                return N;
            }
            
            // Problem broken down into 2 functional calls
            // and their results combined and returned.
            int last = fibonacci(N-1);
            int slast = fibonacci(N-2);
            
            return last + slast;
            

    }
    public static void main(String[] args) {

       // Here, let’s take the value of N to be 4.
       int N = 4;
       System.out.println(fibonacci(N));
    }
}

18.Factorial of a Number
int factorial(n)
{
   if(n == 0)
   {
     return 1;
   }

return n * factorial(n-1);

}

main()
{
   input(n);
   factorial(n);

}

19.Power of a Number
public class Main {
    public static void main(String[] args) {
        int x = 5, n = 3;
        int ans = 1;
        for (int i = 0; i < n; i++) {
            ans = ans * x;
        }
        System.out.println(x + " raised to the power " + n + " is " + ans);
    }
}

20.Factors of a Given Number
import java.util.*;
 
public class tuf {
     static void Divisor(int n)
        {
            for (int i=1;i<=Math.sqrt(n); i++)
            {  
                if (n%i==0)
                {
                    // If divisors are equal, print only one
                    if (n/i == i)
                        System.out.print(" "+ i);
         
                    else // Otherwise print both
                        System.out.print(i+" " + n/i + " " );
                } 
            }
        }
        public static void main(String args[])
        {   int n = 14;
            System.out.print("Factors of " + n + " are: ");
            Divisor(n);;
        }
}

21.Print all Prime Factors of the given number
import java.util.ArrayList;

public class Main {
    public static ArrayList<Integer> getPrimeFactors(int n) {
        // Declare an ArrayList to store
        // the prime factors of n.
        ArrayList<Integer> primeFactors = new ArrayList<>();

        // Loop from 2 up to n
        for (int i = 2; i <= n; i++) {
            // Check if n is divisible by i
            if (n % i == 0) {
                // If divisible, add i to
                // the primeFactors ArrayList
                primeFactors.add(i);
            }
            // Continue dividing n by i
            // until it's no longer divisible
            while (n % i == 0) {
                n = n / i;
            }
        }
        // Return the ArrayList
        // containing the prime factors of n.
        return primeFactors;
    }

    public static void main(String[] args) {
        int n = 60;
        ArrayList<Integer> ans = getPrimeFactors(n);
        System.out.print("Prime Factors for " + n + ": ");
        for (int factor : ans) {
            System.out.print(factor + " ");
        }
        System.out.println();
    }
}

22.Check if a number is a Strong Number or not
public class Main {
   //Function to calculate the factorial of the individual digits
   static int Factorial(int n) {
      int fact = 1;
      for (int i = 1; i <= n; i++) {
         fact = fact * i;
      }
      return fact;
   }

   //Function to compute sum of factorials
   static int Strong_No(int num) {
      int sum = 0;

      //Extract all the digits from num
      while (num > 0) {
         int digit = num % 10;
         sum = sum + Factorial(digit);
         num = num / 10;
      }
      return sum;
   }

   public static void main(String[] args) {

      int number = 145;
      int answer = Strong_No(number);

      if (answer == number && number != 0) {

         System.out.println("YES");
      } 
      else {
         System.out.println("NO");
      }
   }
}

23.Automorphic number
class Solution {

  public static boolean isAutomorphic(int N) {
    int sq = N * N;

    while (N > 0) {

      // Check if last digit is equal or not
      if (N % 10 != sq % 10)
        return false;

      // Reducing the number and its square
      N /= 10;
      sq /= 10;
    }

    return true;
  }
  public static void main(String args[]) {
    int n = 25;
    if(isAutomorphic(n)==true)
    System.out.println("Automorphic Number");
    else
    System.out.println("Not Automorphic Number");
  }
}     

23.GCD and LCM of numbers
import java.util.*;
class Main {
       static int gcd(int num1,int num2){
        while(num2>0){
            int temp=num2;
            num2=num1%num2;
            num1=temp;
        }
        return num1;
       }
       static int lcm(int num1,int num2){
           return (num1*num2)/gcd(num1,num2);
       }
       
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter num1:");
        int num1=sc.nextInt();
        System.out.println("Enter num2:");
        int num2=sc.nextInt();
    
        System.out.println("Lcm of " + num1 + " and " + num2 + " is " + lcm(num1,num2));
    }
}

24.Harzard number or not
import java.util.*;
class Main {
       static void harzardnum(int n){
           int sum=0;
           int orgnum=n;
        while(n>0){
            int id=n%10;
            sum+=id;
            n/=10;
        }
        if(orgnum%sum==0){
            System.out.println("Yes it is a Harshad number");
        }
        else{
              System.out.println("NO, it is a Harshad number");
        }
       }
       
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter n:");
        int n=sc.nextInt();
        harzardnum(n);
    }
}

25.Abundant Number
public class Main {
  public static void main(String args[]) {
    int n = 18;
    int sum = 0;
    for (int i = 1; i <= n; i++) {
      if (n % i == 0) {
        sum += i;
      }
    }
    sum-=n;
    if (sum > n) {
      System.out.print("Abundant Number");
    } else {
      System.out.print("Not Abundant Number");
    }
  }
}

26.Sum of digits
import java.io.*;
class Test
{
static private int getSum(int n)
{
	int d;
	int sum = 0;
	while (n != 0)
	{
		d = n % 10;
		sum += d;
		n = n / 10;
	}
	return sum;
}
public static void main(String[] args)
{
	int n = 472;
	System.out.print("Sum of digits of the given number is "+getSum(n));
}
}

27.The sum of the numbers in the given range
public class Main {
  public static void main(String args[]) {
    int l = 2, r = 7;
    //sum(1 to r) - sum(1 to l-1)
    int ans = (r * (r + 1)) / 2 - ((l - 1) * (l)) / 2;
    System.out.print("The sum of the numbers in the given range is "+ans);
  }
}

28.permutation
public class Main {
  public static void main(String args[]) {
    int n = 6, r = 4;
    int ans = 1;
    for (int i = n; i >= n - r + 1; i--) {
      ans *= i;
    }
    System.out.print(ans);
  }
}

29.Add teo fractions
public class Main {
  static int _gcd(int a, int b) {
    if (b == 0) {
      return a;
    }
    return _gcd(b, a % b);
  }
  static void simple(int num3, int den3) {
    int gcd = _gcd(num3, den3);
    //dividing num and den by gcd to get the fraction
    //in the simplest form.
    num3 /= gcd;
    den3 /= gcd;
  }
  public static void main(String args[]) {
    int num1 = 3, den1 = 4, num2 = 1, den2 = 7, num3, den3;
    int lcm = (den1 * den2) / _gcd(den1, den2);
    //answer's denominator will be lcm of den1 and den2
    den3 = lcm;
    //changing numerators to have same denominator and then adding
    num3 = num1 * (den3 / den1) + num2 * (den3 / den2);
    simple(num3, den3);
    System.out.println(num1 + "/" + den1 + " + " + num2 + "/" + den2 + " = " + num3 + "/" + 
    den3);
  }
}

30.replaceZerosWithOnes
public class Main {
   static int replaceZerosWithOnes(int num) {
      if (num == 0) {
         return 1;
      }
      int ans = 0, tmp = 1;
      while (num > 0) {
         int d = num % 10;
         if (d == 0) {
            d = 1;
         }
         ans = d * tmp + ans;
         num = num / 10;
         tmp = tmp * 10;
      }
      return ans;
   }

   public static void main(String[] args) {

      int n = 204;
      int result = replaceZerosWithOnes(n);
      System.out.println("After replacing zeros with ones " + n + " becomes " + result);
   }
} 

31.Express given number as Sum of Two Prime Numbers
import java.util.*;

public class Solution {

       static boolean prime(int n) {

              if (n <= 1)
                     return false;

              for (int i = 2; i * i <= n; i++) {
                     if (n % i == 0) {
                            return false;
                     }
              }

              return true;
       }

       static boolean isPrime(int n) {

              if (prime(n) && prime(n - 2)) {
                     return true;
              } else {
                     return false;
              }
       }

       public static void main(String[] args) {

              int n = 19;

              if (isPrime(n)) {
                     System.out.println("Yes");
              } else if (isPrime(n)) {
                     System.out.println("No");
              }
       }
}

32.areaOfCircle
class Solution {

  public static void areaOfCircle(int n) {

    double ans = 3.14 * n * n; // Area of circle = πr2
    System.out.print("Area of circle is : " + ans);

  }
  public static void main(String args[]) {
    int n = 5;
    areaOfCircle(n);
  }
}

33.Program to Find Roots of a quadratic equation
import java.util.*;
 
public class tuf {
    static void Roots(int a, int b, int c)
    {
        if (a == 0) {
            System.out.println("Invalid");
            return;
        }
 
        int d = b * b - 4 * a * c;
        double sqrt_val = Math.sqrt(Math.abs(d));
 
        if (d > 0) {
            System.out.println("Roots are real and different ");
           
            double root1 = (double)(-b + sqrt_val) / (2 * a);
            double root2 = (double)(-b - sqrt_val) / (2 * a);
            System.out.println(root1 + "\n"+root2);
            }
        else if (d == 0) {
            System.out.println("Roots are real and same ");
            double root1 = -(double)b / (2 * a);
            double root2 = -(double)b / (2 * a);
            System.out.println(root1 + "\n"+root2);
        }
        else // d < 0
        {
            System.out.println("Roots are complex ");
 
            System.out.println(-(double)b / (2 * a) + " + i"+ sqrt_val + "\n"+
                               -(double)b / (2 * a) + " - i" + sqrt_val);
        }
    }
        public static void main(String args[])
        {
             int a = 1, b = -3, c = -10;
             
             Roots(a, b, c);
        }
}
